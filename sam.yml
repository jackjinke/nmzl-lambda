AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: NMZL website's lambda functions
Parameters:
  SteamApiKey:
    NoEcho: true
    Type: String
  OpenDotaApiKey:
    NoEcho: true
    Type: String
  TeamPlayerCountThreshold:
    Type: Number
    Default: 3
  GetPlayersLambdaCacheTTL:
    Type: Number
    Default: 120
  GetPlayersLambdaSignatureHeroCountThreshold:
    Type: Number
    Default: 3
  GetPlayersLambdaSignatureHeroMatchLimit:
    Type: Number
    Default: 150
  GetBattleCupMatchesLambdaCacheTTL:
    Type: Number
    Default: 120
  GetHeroMetadataLambdaCacheTTL:
    Type: Number
    Default: 86400
  RefreshPlayersOpendotaProfileScheduleExpression:
    Type: String
    Default: 'cron(0 9 * * ? *)'
  LoadMatchesScheduleExpression:
    Type: String
    Default: 'cron(0 10 * * ? *)'
  RefreshAllMatchIdsScheduleExpression: 
    Type: String
    Default: 'cron(0 9 ? * SAT *)'
  AllMatchIdsCacheTTL: 
    Type: Number
    Default: 129600 
  UpdateHeroMetadataScheduleExpression:
    Type: String
    Default: 'rate(1 day)'

Globals:
  Function:
    Runtime: nodejs8.10
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'https://nmzl.us'"

Resources:
  ########## GetPlayers ##########
  GetPlayersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'get-players.handler'
      Role:
        Fn::GetAtt:
        - GetPlayersLambdaExecutionRole
        - Arn
      Timeout: 10
      Environment:
        Variables:
          API_RESPONSE_CACHE_KEY: 'GetPlayers'
          CACHE_TTL: !Ref GetPlayersLambdaCacheTTL
          HERO_COUNT_THRESHOLD: !Ref GetPlayersLambdaSignatureHeroCountThreshold
          MATCH_LIMIT: !Ref GetPlayersLambdaSignatureHeroMatchLimit
          STEAM_API_KEY: !Ref SteamApiKey
          OPENDOTA_API_KEY: !Ref OpenDotaApiKey
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /players
            Method: get

  GetPlayersLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetPlayersLambdaDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetPlayersLambdaDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_PLAYERS'
        - Effect: Allow
          Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_API_CACHE'
        - Effect: Allow
          Action:
          - 'dynamodb:BatchGetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DOTA2_HERO_INFO'
      Roles:
      - !Ref GetPlayersLambdaExecutionRole

  ########## GetBattleCupMatches - Deprecated ##########
  GetBattleCupMatchesDeprecatedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'get-battle-cup-matches.handler'
      Role:
        Fn::GetAtt:
        - GetBattleCupMatchesDeprecatedLambdaExecutionRole
        - Arn
      Timeout: 15
      Environment:
        Variables:
          API_RESPONSE_CACHE_KEY: 'GetBattleCupMatchesDeprecated'
          CACHE_TTL: !Ref GetBattleCupMatchesLambdaCacheTTL
          BATTLE_CUP_TEAM_PLAYER_COUNT_THRESHOLD: !Ref TeamPlayerCountThreshold
          OPENDOTA_API_KEY: !Ref OpenDotaApiKey
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /matches
            Method: get

  GetBattleCupMatchesDeprecatedLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetBattleCupMatchesLambdaDeprecatedDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetBattleCupMatchesDeprecatedDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_PLAYERS'
        - Effect: Allow
          Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_API_CACHE'
        - Effect: Allow
          Action:
          - 'dynamodb:BatchGetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DOTA2_HERO_INFO'
        - Effect: Allow
          Action:
          - 'dynamodb:BatchGetItem'
          - 'dynamodb:BatchWriteItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_MATCHES'
      Roles:
      - !Ref GetBattleCupMatchesDeprecatedLambdaExecutionRole

########## GetBattleCupMatches - New ##########
  GetBattleCupMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'get-battle-cup-matches.newHandler'
      Role:
        Fn::GetAtt:
        - GetBattleCupMatchesLambdaExecutionRole
        - Arn
      Timeout: 10
      Environment:
        Variables:
          API_RESPONSE_CACHE_KEY: 'GetBattleCupMatches'
          CACHE_TTL: !Ref GetBattleCupMatchesLambdaCacheTTL
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /matches/battlecup
            Method: get

  GetBattleCupMatchesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetBattleCupMatchesLambdaDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetBattleCupMatchesLambdaDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_API_CACHE'
        - Effect: Allow
          Action:
          - 'dynamodb:BatchGetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DOTA2_HERO_INFO'
        - Effect: Allow
          Action:
          - 'dynamodb:Query'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_MATCHES/index/INDEX_LOBBY_TYPE'
      Roles:
      - !Ref GetBattleCupMatchesLambdaExecutionRole

  ########## GetHeroMetadata ##########
  GetHeroMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'get-hero-metadata.handler'
      Role:
        Fn::GetAtt:
        - GetHeroMetadataLambdaExecutionRole
        - Arn
      Timeout: 5
      Environment:
        Variables:
          API_RESPONSE_CACHE_KEY: 'GetHeroMetadata'
          CACHE_TTL: !Ref GetHeroMetadataLambdaCacheTTL
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /herometadata
            Method: get

  GetHeroMetadataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetHeroMetadataLambdaDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GetHeroMetadataLambdaDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:PutItem'
          - 'dynamodb:GetItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_API_CACHE'
        - Effect: Allow
          Action:
          - 'dynamodb:BatchGetItem'
          - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DOTA2_HERO_INFO'
      Roles:
      - !Ref GetHeroMetadataLambdaExecutionRole

  ########## RefreshPlayersOpendotaProfile ##########
  RefreshPlayersOpendotaProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'refresh-players-opendota-profile.handler'
      Role:
        Fn::GetAtt:
        - RefreshPlayersOpendotaProfileLambdaExecutionRole
        - Arn
      Timeout: 5
      Environment:
        Variables:
          OPENDOTA_API_KEY: !Ref OpenDotaApiKey

  RefreshPlayersOpendotaProfileLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  RefreshPlayersOpendotaProfileLambdaDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RefreshPlayersOpendotaProfileLambdaDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_PLAYERS'
      Roles:
      - !Ref RefreshPlayersOpendotaProfileLambdaExecutionRole

  RefreshPlayersOpendotaProfileLambdaScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: RefreshPlayersOpendotaProfileLambdaScheduledRule
      ScheduleExpression: !Ref RefreshPlayersOpendotaProfileScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - RefreshPlayersOpendotaProfileFunction
          - Arn
        Id: RefreshPlayersOpendotaProfile

  RefreshPlayersOpendotaProfilePermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RefreshPlayersOpendotaProfileFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - RefreshPlayersOpendotaProfileLambdaScheduledRule
        - Arn

########## LoadMatches ##########
  LoadMatchesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'load-matches.handler'
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LoadMatchesLambdaExecutionRole
        - Arn
      Timeout: 60
      Environment:
        Variables:
          OPENDOTA_API_KEY: !Ref OpenDotaApiKey
          TEAM_PLAYER_COUNT_THRESHOLD: !Ref TeamPlayerCountThreshold
          ALL_MATCH_ID_CACHE_KEY: 'AllMatchIds'
          ALL_MATCH_ID_CACHE_TTL: !Ref AllMatchIdsCacheTTL

  LoadMatchesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LoadMatchesLambdaDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LoadMatchesLambdaDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_PLAYERS'
        - Effect: Allow
          Action:
          - 'dynamodb:Scan'
          - 'dynamodb:BatchWriteItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_MATCHES'
        - Effect: Allow
          Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_API_CACHE'
      Roles:
      - !Ref LoadMatchesLambdaExecutionRole

  LoadMatchesLambdaScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: LoadMatchesLambdaScheduledRule
      ScheduleExpression: !Ref LoadMatchesScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - LoadMatchesFunction
          - Arn
        Id: LoadMatches

  LoadMatchesPermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadMatchesFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - LoadMatchesLambdaScheduledRule
        - Arn

  ########## RefreshAllMatchIds ##########
  RefreshAllMatchIdsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'refresh-all-match-ids.handler'
      Role:
        Fn::GetAtt:
        - RefreshAllMatchIdsLambdaExecutionRole
        - Arn
      MemorySize: 192
      Timeout: 60
      Environment:
        Variables:
          API_RESPONSE_CACHE_KEY: 'AllMatchIds'
          CACHE_TTL: !Ref AllMatchIdsCacheTTL

  RefreshAllMatchIdsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  RefreshAllMatchIdsDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RefreshAllMatchIdsDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_MATCHES'
        - Effect: Allow
          Action:
          - 'dynamodb:PutItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NMZL_US_API_CACHE'
      Roles:
      - !Ref RefreshAllMatchIdsLambdaExecutionRole

  RefreshAllMatchIdsLambdaScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: RefreshAllMatchIdsLambdaScheduledRule
      ScheduleExpression: !Ref RefreshAllMatchIdsScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - RefreshAllMatchIdsFunction
          - Arn
        Id: RefreshAllMatchIds

  RefreshAllMatchIdsPermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RefreshAllMatchIdsFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - RefreshAllMatchIdsLambdaScheduledRule
        - Arn

  ########## UpdateHeroMetadata ##########
  UpdateHeroMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: 'update-hero-metadata.handler'
      Role:
        Fn::GetAtt:
        - UpdateHeroMetadataLambdaExecutionRole
        - Arn
      Timeout: 5
      Environment:
        Variables:
          OPENDOTA_API_KEY: !Ref OpenDotaApiKey

  UpdateHeroMetadataLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  UpdateHeroMetadataDynamoDBAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UpdateHeroMetadataDynamoDBAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - 'dynamodb:BatchWriteItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DOTA2_HERO_INFO'
      Roles:
      - !Ref UpdateHeroMetadataLambdaExecutionRole

  UpdateHeroMetadataLambdaScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: UpdateHeroMetadataLambdaScheduledRule
      ScheduleExpression: !Ref UpdateHeroMetadataScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - UpdateHeroMetadataFunction
          - Arn
        Id: UpdateHeroMetadata

  UpdateHeroMetadataPermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateHeroMetadataFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - UpdateHeroMetadataLambdaScheduledRule
        - Arn
